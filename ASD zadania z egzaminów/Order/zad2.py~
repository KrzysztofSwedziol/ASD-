from zad2testy import runtests
from collections import deque

def TopSort(G):
    n = len(G)
    visited = [False for i in range(n)]
    parents = [None for i in range(n)]
    sorted = []
    current = 0
    stack = deque()
    DFS(G, visited, parents, stack)
    while (len(stack)) > 0:
        current = stack.pop()
        sorted.append((current, [G[current]]))

    return sorted


def explore(graph, node, visited, parents, stack):
    global time
    time +=1   #wierzchołek został odwiedzony i time to czas odwiedzenia
    visited[node] = True
    for neighbour in graph[node]:
        if visited[neighbour] == False:
            parents[neighbour] = node
            explore(graph, neighbour, visited, parents, stack)
    time +=1   #wierzchołek został przetworzony i time to czas przetworzenia

    stack.append(node)


def DFS(graph, visited, parents, stack):
    for v in range(len(graph)):
        visited[v] = False
        parents[v] = None
    global time
    time = 0
    for v in range(len(graph)):
        if visited[v] == False :
            explore(graph, v, visited, parents, stack)

def create_graph(graph, L, K):
    n = len(L)
    for i in range(n):
        curr = L[i]
        for j in range(n):
            if L[j] != curr:
                if curr%(10**K) == L[j]//(10**K):
                    graph[i].append(j)


def order(L,K):
    n = len(L)
    graph = [[] for i in range(n)]
    create_graph(graph, L, K)
    a = TopSort(graph)
    tab = []
    for i in range(len(a)):
        tab.append(L[a[i]])
    return tab

    
runtests( order )


